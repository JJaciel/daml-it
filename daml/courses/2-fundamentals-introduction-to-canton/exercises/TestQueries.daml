module TestQueries where

import Daml.Script

import Main
import DA.List (head)

testQueries : Script ()
testQueries = script do
    bank <- allocateParty "Bank"
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"

    aliceAccountCId <- submitMulti [bank, alice] [] do
        createCmd BankAccount with
            bank
            accountOwner = alice
            balance = 100.00

    bobAccountCId <- submitMulti [bank, bob] [] do
        createCmd BankAccount with
            bank
            accountOwner = bob
            balance = 100.00

    -- Query
    [(cid, contract)] <- query @BankAccount alice
    debug "Bank accounts visible to Alice"
    debug $ cid
    debug $ contract
    debug "---------------------------------------"

    
    debug "Bank accounts visible to Bob"
    bobList <- query @BankAccount bob
    debug $ bobList
    debug "---------------------------------------"

    debug "visible Bank accounts"
    bankList <- query @BankAccount bank
    debug $ bankList
    debug "---------------------------------------"

    -- QueryContract by Id
    debug "Alice Account by contract Id"
    aliceAccount <- queryContractId alice aliceAccountCId
    debug $ aliceAccount -- trace: Some BankAccount

    debug "Bob Account by contract Id"
    bobAccount <- queryContractId bob aliceAccountCId
    debug $ bobAccount -- trace: None

    -- QueryContract by Key
    debug "Alice Account by contract Key"
    aliceAccountByKey <- queryContractKey @BankAccount alice (bank, alice)
    debug $ aliceAccountByKey

    debug "Bob Account by contract Key"
    bobAccountByKey <- queryContractKey @BankAccount bob (bank, alice)
    debug $ bobAccountByKey

    -- Query Filter
    debug "Query Filter: Large Accounts amount >= 100"
    largeAccounts <- queryFilter
        @BankAccount
        bank
        \account -> (account.balance >= 100.00)
    debug $ largeAccounts
    debug $ show (head largeAccounts)._2

    

