module TypeConstraingExample where

import Daml.Script

hello: Show a => a -> Text
hello a = "Hello " <> show a

testHello : Script ()
testHello = script do
    debug $ hello 12
    debug $ hello [1, 2, 3]
    debug $ hello ("abc", 3)


-- Optional type

notSafeDiv: Int -> Int -> Int
notSafeDiv x y = x / y

safeDiv: Int -> Int -> Optional Int
safeDiv _ 0 = None -- has divided as underscore, indicating a catchall and divisor as zero
safeDiv x y = Some (x / y) -- this second pattern match will return some value of type Int


testOptional = script do
    debug $ notSafeDiv 6 2 -- trace: 3
    -- debug $ notSafeDiv 6 0 -- throws "DA.Exception.ArithmeticError" since a number cannot be divided by 0
    
    debug $ safeDiv 6 0 -- trace: None
    debug $ safeDiv 6 3 -- trace: Some 2
