module Concat where

import Daml.Script

concatenateAll: [[a]] -> [a]
concatenateAll arrs = foldl (\acc arr -> acc ++ arr) [] arrs

testConcatenateAll : Script ()
testConcatenateAll = script do
    let arr1 = [0, 3, 4]
    let arr2 = [1, 5, 6]
    let arr3 = [4]
    let res = concatenateAll [arr1, arr2, arr3]
    debug $ res -- result: [0,3,4,1,5,6,4]



data ConcatenatedResult a = ConcatenatedResult with
    list1 : [a]
    list2 : [a]
    result : [a]
  deriving (Eq, Show)

emptyConcatenatedResult : ConcatenatedResult a
emptyConcatenatedResult = ConcatenatedResult [] [] []

updateConcatenatedResult : ConcatenatedResult a -> [a] -> [a] -> ConcatenatedResult a
updateConcatenatedResult state newList1 newList2 =
  let
    updatedList1 = concat [(reverse newList1), (reverse (state.list1))]
    updatedList2 = concat [(reverse newList2), (reverse (state.list2))]
    updatedResult = concat [(reverse updatedList1), (reverse updatedList2)]
  in
    state { list1 = reverse updatedList1, list2 = reverse updatedList2, result = reverse updatedResult }

reverseList : [a] -> [a]
reverseList l = reverse l


concatenateLists : [a] -> [a] -> [a]
concatenateLists list1 list2 =
  let
    initialResult = emptyConcatenatedResult
    updatedResult = updateConcatenatedResult initialResult list1 list2
  in
    updatedResult.result

